import socket
import threading

# Server address and port
SERVER_ADDRESS = 'localhost'
SERVER_PORT = 51234

# Tuple space
tuple_space = {}

def encode_message(command, key, value=None, error=None):
    if error:
        message = f"{len(error):03} ERR {error}"
    elif command == 'R':
        message = f"{len(f'OK ({key}, {value}) read'):03} OK ({key}, {value}) read"
    elif command == 'G':
        message = f"{len(f'OK ({key}, {value}) removed'):03} OK ({key}, {value}) removed"
    elif command == 'P':
        message = f"{len(f'OK ({key}, {value}) added'):03} OK ({key}, {value}) added"
    return message

def handle_client(client_socket):
    while True:
        request = client_socket.recv(1024).decode()
        if not request:
            break
        # Parse request
        parts = request.split()
        message_length = int(parts[0])
        command = parts[1]
        key = parts[2]
        if command == 'R':
            if key in tuple_space:
                response = encode_message('R', key, tuple_space[key])
            else:
                response = encode_message(None, None, None, f"{key} does not exist")
        elif command == 'G':
            if key in tuple_space:
                response = encode_message('G', key, tuple_space[key])
                del tuple_space[key]
            else:
                response = encode_message(None, None, None, f"{key} does not exist")
        elif command == 'P':
            value = ' '.join(parts[3:])
            if key not in tuple_space:
                tuple_space[key] = value
                response = encode_message('P', key, value)
            else:
                response = encode_message(None, None, None, f"{key} already exists")
        client_socket.send(response.encode())
    client_socket.close()

def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((SERVER_ADDRESS, SERVER_PORT))
    server_socket.listen(5)
    print("Server started, waiting for clients...")
    while True:
        client_socket, addr = server_socket.accept()
        client_thread = threading.Thread(target=handle_client, args=(client_socket,))
        client_thread.start()

if __name__ == "__main__":
    start_server()
